@{
	string navFolder = Model.String("RelativeFilePath", string.Empty).Split(new[] {'\\'})[0];
	IList<IGrouping<string, IDocument>> categoryGroups = string.IsNullOrWhiteSpace(navFolder) 
		? new List<IGrouping<string, IDocument>>() : Documents
			.Where(x => x.ContainsKey("RelativeFilePath")
				&& !x.String("RelativeFilePath").EndsWith("index.md") 
				&& !x.String("RelativeFilePath").EndsWith("index.cshtml") 
				&& x.String("RelativeFilePath").StartsWith(navFolder))
			.GroupBy(x => x.String("Category"))
			.OrderBy(x => x.Key)
			.ToList();
	foreach(IGrouping<string, IDocument> categoryGroup in categoryGroups)
	{
		if(!string.IsNullOrWhiteSpace(categoryGroup.Key))
		{
			<li class="header">@categoryGroup.Key</li>
		}
						
		foreach(IDocument childDoc in categoryGroup
			.OrderBy(x => x.Get<int>("Order", 1000))
			.ThenBy(x => x.String("Title")))
		{
			string subActive = Model.String("RelativeFilePath") == childDoc.String("RelativeFilePath") ? "active" : null;
			<li class="@subActive">
				<a href="@PathHelper.ToRootLink(PathHelper.RemoveExtension(childDoc.String("RelativeFilePath")))">
					@(childDoc.String("Title", childDoc.String("SourceFileBase")))
				</a>
			</li>
		}                             
	}
}