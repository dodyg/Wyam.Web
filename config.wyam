using Wyam.Modules.Razor.Microsoft.AspNet.Mvc.Rendering;
using Microsoft.CodeAnalysis;

public static class HtmlHelperExtensions
{		
	public static HtmlString Name(this IMetadata metadata)
	{
		string name = metadata.String("DisplayName");
        return name == null 
			? new HtmlString(string.Empty) 
			: new HtmlString(System.Net.WebUtility.HtmlEncode(name.ToString()).ToString()
				.Replace(".", "<wbr>.")
				.Replace("(", "<wbr>(")
				.Replace(")", ")<wbr>")
				.Replace("&lt;", "<wbr>&lt;")
				.Replace("&gt;", "&gt;<wbr>"));		
	}
	
	public static HtmlString Link(this IMetadata metadata)
	{
		if(metadata.String("Kind") == "TypeParameter")
		{
			IDocument declaringType = metadata.Get<IDocument>("DeclaringType");
			if(declaringType != null)
			{			
				return declaringType.ContainsKey("WritePath")
					? new HtmlString($"<a href=\"{declaringType.Link("WritePath")}#typeparam-{metadata["Name"]}\">{metadata.Name()}</a>")
					: metadata.Name();
			}
		} 
		return metadata.ContainsKey("WritePath")
			? new HtmlString($"<a href=\"{metadata.Link("WritePath")}\">{metadata.Name()}</a>")
			: metadata.Name();
	}
}

public class DocsTable
{
	public IList<IDocument> Docs { get; set; }
	public string Title { get; set; }
	public string Header { get; set; }
	public bool HasSummary { get; set; }
}

---

Pipelines.Add("Code",
	ReadSolution(@"..\Code\Wyam\Wyam.sln")  // Read from the master Wyam branch in the Git submodule
	//ReadSolution(@"..\..\Wyam\Wyam.sln")  // Read from the current branch on disk in the actual repo
		.WhereProject(x => !x.EndsWith(".Tests"))
);

Pipelines.Add("API",
	Documents("Code"),
	AnalyzeCSharp()
		.WhereNamespaces(false)
		.WhereNamespaces(x => !x.StartsWith("Wyam.Modules.Razor.Microsoft"))
		.WherePublic()
		.WithCssClasses("pre", "prettyprint")
		.WithWritePathPrefix("api"),
	Razor()
		.WithViewStart(@"api\_ApiViewStart.cshtml"),
	ConcatBranch(
		Where(@doc.String("Kind") == "NamedType"),
		SearchIndex(new SearchIndexItem(
			"/" + @doc.String("WritePath").Replace("/index.html", string.Empty), 
			@doc.String("DisplayName"), 
			@doc.String("DisplayName"))),
		Meta("WritePath", @"Scripts\searchIndex.js")
	),
	WriteFiles()
);

Pipelines.Add("Modules",
	Documents("Code"),
	AnalyzeCSharp()
		.WithNamedTypes(x => x.AllInterfaces.Any(y => y.Name == "IModule") && !x.IsAbstract)
		.WherePublic()
		.WithCssClasses("pre", "prettyprint")
		.WithDocsForImplicitSymbols()
		.WithWritePath(x => {
			string name = x.String("DisplayName").ToLower();
			if(name == "index")
			{
				name = "indx";  // Special case for the Index module
			}
			return $"modules\\{name}.html";
		}),
	Razor()
		.WithViewStart(@"modules\_ModulesViewStart.cshtml"),
	WriteFiles()
);

Pipelines.Add("Content",
	ReadFiles("*.md"),
	FrontMatter(Yaml()),
	Markdown(),
	Replace("<pre><code>", "<pre class=\"prettyprint\"><code>"),
	Concat(
		ReadFiles("*.cshtml").Where(x => Path.GetFileName(x)[0] != '_'),
		FrontMatter(Yaml())		
	),
	Razor(),
	WriteFiles(".html")
);

Pipelines.Add("Less",
    ReadFiles("Content\\bootstrap-less\\bootstrap.less"),
    Concat(ReadFiles("Content\\adminlte\\AdminLTE.less")),
    Concat(ReadFiles("Content\\adminlte\\skins\\wyam.less")),
    Concat(ReadFiles("Content\\master.less")),
    Less(),
    WriteFiles(".css")
);

Pipelines.Add("Resources",
	CopyFiles("*").WithoutExtensions(".cshtml", ".md")
);
